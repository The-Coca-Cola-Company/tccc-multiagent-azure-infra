{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "description": "üîê Step 1/2: Deploy TCCC Hub infrastructure, set secrets, assign roles",
    "_generator": {
      "name": "bicep",
      "version": "0.20.4.51522",
      "templateHash": "98765432109876543210"
    }
  },
  "parameters": {
    "environment": {
      "type": "string",
      "defaultValue": "dev",
      "allowedValues": [
        "dev",
        "test",
        "prod"
      ],
      "metadata": {
        "description": "Environment name (dev, test, or prod)"
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Azure region for all resources"
      }
    },
    "deployAIFoundry": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Deploy Azure AI Foundry for TCCC Hub orchestration"
      }
    },
    "deployCosmosDB": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Deploy Cosmos DB for hub state management"
      }
    },
    "deployNetworking": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Deploy VNET and networking components for enhanced security"
      }
    },
    "vnetAddressPrefix": {
      "type": "string",
      "defaultValue": "10.1.0.0/16",
      "metadata": {
        "description": "TCCC VNET address space (must not overlap with bottler VNETs)"
      }
    }
  },
  "variables": {
    "uniqueSuffix": "[substring(uniqueString(resourceGroup().id), 0, 6)]",
    "keyVaultSuffix": "[substring(uniqueString(resourceGroup().id, deployment().name), 0, 6)]",
    "baseName": "tccc-hub",
    "resourcePrefix": "[format('{0}-{1}', variables('baseName'), parameters('environment'))]",
    "storageAccountName": "[toLower(format('st{0}{1}{2}', replace(variables('baseName'), '-', ''), parameters('environment'), variables('uniqueSuffix')))]",
    "keyVaultName": "[format('kv{0}{1}{2}', replace(variables('baseName'), '-', ''), parameters('environment'), variables('keyVaultSuffix'))]",
    "vnetName": "[format('{0}-vnet-{1}', variables('resourcePrefix'), variables('uniqueSuffix'))]",
    "nsgPrefix": "[format('{0}-nsg', variables('resourcePrefix'))]"
  },
  "resources": [
    {
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2023-04-01",
      "name": "[variables('storageAccountName')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "Standard_LRS"
      },
      "kind": "StorageV2",
      "properties": {
        "supportsHttpsTrafficOnly": true,
        "minimumTlsVersion": "TLS1_2",
        "allowBlobPublicAccess": false,
        "networkAcls": "[if(parameters('deployNetworking'), createObject('bypass', 'AzureServices', 'defaultAction', 'Deny', 'virtualNetworkRules', createArray(createObject('id', format('{0}/subnets/snet-functions', resourceId('Microsoft.Network/virtualNetworks', variables('vnetName'))), 'action', 'Allow'), createObject('id', format('{0}/subnets/snet-private-endpoints', resourceId('Microsoft.Network/virtualNetworks', variables('vnetName'))), 'action', 'Allow'))), createObject('defaultAction', 'Deny', 'bypass', 'AzureServices'))]"
      }
    },
    {
      "condition": "[parameters('deployNetworking')]",
      "type": "Microsoft.Network/networkSecurityGroups",
      "apiVersion": "2023-06-01",
      "name": "[format('{0}-functions-{1}', variables('nsgPrefix'), variables('uniqueSuffix'))]",
      "location": "[parameters('location')]",
      "properties": {
        "securityRules": [
          {
            "name": "AllowHttpsInboundFromBottlers",
            "properties": {
              "priority": 100,
              "access": "Allow",
              "direction": "Inbound",
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "443",
              "sourceAddressPrefix": "10.2.0.0/16",
              "destinationAddressPrefix": "*",
              "description": "Allow HTTPS from Bottler VNETs only"
            }
          },
          {
            "name": "DenyAllInbound",
            "properties": {
              "priority": 4096,
              "access": "Deny",
              "direction": "Inbound",
              "protocol": "*",
              "sourcePortRange": "*",
              "destinationPortRange": "*",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*",
              "description": "Deny all other inbound traffic"
            }
          }
        ]
      }
    },
    {
      "condition": "[parameters('deployNetworking')]",
      "type": "Microsoft.Network/networkSecurityGroups",
      "apiVersion": "2023-06-01",
      "name": "[format('{0}-pe-{1}', variables('nsgPrefix'), variables('uniqueSuffix'))]",
      "location": "[parameters('location')]",
      "properties": {
        "securityRules": [
          {
            "name": "DenyAllInbound",
            "properties": {
              "priority": 4096,
              "access": "Deny",
              "direction": "Inbound",
              "protocol": "*",
              "sourcePortRange": "*",
              "destinationPortRange": "*",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*",
              "description": "Deny all inbound traffic to private endpoints"
            }
          }
        ]
      }
    },
    {
      "condition": "[parameters('deployNetworking')]",
      "type": "Microsoft.Network/virtualNetworks",
      "apiVersion": "2023-06-01",
      "name": "[variables('vnetName')]",
      "location": "[parameters('location')]",
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[parameters('vnetAddressPrefix')]"
          ]
        },
        "subnets": [
          {
            "name": "snet-functions",
            "properties": {
              "addressPrefix": "10.1.1.0/24",
              "networkSecurityGroup": "[if(parameters('deployNetworking'), createObject('id', resourceId('Microsoft.Network/networkSecurityGroups', format('{0}-functions-{1}', variables('nsgPrefix'), variables('uniqueSuffix')))), null())]",
              "serviceEndpoints": [
                {
                  "service": "Microsoft.Storage"
                },
                {
                  "service": "Microsoft.KeyVault"
                },
                {
                  "service": "Microsoft.Web"
                }
              ],
              "delegations": [
                {
                  "name": "delegation",
                  "properties": {
                    "serviceName": "Microsoft.Web/serverFarms"
                  }
                }
              ]
            }
          },
          {
            "name": "snet-private-endpoints",
            "properties": {
              "addressPrefix": "10.1.2.0/24",
              "networkSecurityGroup": "[if(parameters('deployNetworking'), createObject('id', resourceId('Microsoft.Network/networkSecurityGroups', format('{0}-pe-{1}', variables('nsgPrefix'), variables('uniqueSuffix')))), null())]",
              "privateEndpointNetworkPolicies": "Disabled"
            }
          }
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/networkSecurityGroups', format('{0}-functions-{1}', variables('nsgPrefix'), variables('uniqueSuffix')))]",
        "[resourceId('Microsoft.Network/networkSecurityGroups', format('{0}-pe-{1}', variables('nsgPrefix'), variables('uniqueSuffix')))]"
      ]
    },
    {
      "type": "Microsoft.Web/serverfarms",
      "apiVersion": "2023-01-01",
      "name": "[format('{0}-asp-{1}', variables('resourcePrefix'), variables('uniqueSuffix'))]",
      "location": "[parameters('location')]",
      "sku": "[if(parameters('deployNetworking'), createObject('name', 'EP1', 'tier', 'ElasticPremium'), createObject('name', 'Y1', 'tier', 'Dynamic'))]",
      "properties": {
        "reserved": true
      }
    },
    {
      "type": "Microsoft.Insights/components",
      "apiVersion": "2020-02-02",
      "name": "[format('{0}-ai-{1}', variables('resourcePrefix'), variables('uniqueSuffix'))]",
      "location": "[parameters('location')]",
      "kind": "web",
      "properties": {
        "Application_Type": "web"
      }
    },
    {
      "type": "Microsoft.KeyVault/vaults",
      "apiVersion": "2023-07-01",
      "name": "[variables('keyVaultName')]",
      "location": "[parameters('location')]",
      "properties": {
        "tenantId": "[subscription().tenantId]",
        "sku": {
          "family": "A",
          "name": "standard"
        },
        "enableRbacAuthorization": true,
        "enableSoftDelete": true,
        "softDeleteRetentionInDays": 90,
        "enablePurgeProtection": true,
        "networkAcls": "[if(parameters('deployNetworking'), json(concat('{\"bypass\":\"AzureServices\",\"defaultAction\":\"Deny\",\"virtualNetworkRules\":[{\"id\":\"', format('{0}/subnets/snet-functions', resourceId('Microsoft.Network/virtualNetworks', variables('vnetName'))), '\",\"ignoreMissingVnetServiceEndpoint\":false}]}')), json('{\"defaultAction\":\"Allow\",\"bypass\":\"AzureServices\"}'))]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks', variables('vnetName'))]"
      ]
    },
    {
      "condition": "[parameters('deployCosmosDB')]",
      "type": "Microsoft.DocumentDB/databaseAccounts",
      "apiVersion": "2023-11-15",
      "name": "[format('{0}-cosmos-{1}', variables('resourcePrefix'), variables('uniqueSuffix'))]",
      "location": "[parameters('location')]",
      "kind": "GlobalDocumentDB",
      "properties": {
        "databaseAccountOfferType": "Standard",
        "consistencyPolicy": {
          "defaultConsistencyLevel": "Session"
        },
        "locations": [
          {
            "locationName": "[parameters('location')]",
            "failoverPriority": 0
          }
        ],
        "capabilities": [
          {
            "name": "EnableServerless"
          }
        ],
        "publicNetworkAccess": "[if(parameters('deployNetworking'), 'Disabled', 'Enabled')]"
      }
    },
    {
      "condition": "[parameters('deployAIFoundry')]",
      "type": "Microsoft.MachineLearningServices/workspaces",
      "apiVersion": "2023-10-01",
      "name": "[format('{0}-aihub-{1}', variables('resourcePrefix'), variables('uniqueSuffix'))]",
      "location": "[parameters('location')]",
      "kind": "hub",
      "identity": {
        "type": "SystemAssigned"
      },
      "properties": {
        "friendlyName": "TCCC Hub AI Foundry",
        "description": "AI Foundry for TCCC Hub orchestration and cross-bottler analytics",
        "storageAccount": "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]",
        "keyVault": "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]",
        "applicationInsights": "[resourceId('Microsoft.Insights/components', format('{0}-ai-{1}', variables('resourcePrefix'), variables('uniqueSuffix')))]",
        "hbiWorkspace": false,
        "managedNetwork": {
          "isolationMode": "AllowInternetOutbound"
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]",
        "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]",
        "[resourceId('Microsoft.Insights/components', format('{0}-ai-{1}', variables('resourcePrefix'), variables('uniqueSuffix')))]"
      ]
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2023-07-01",
      "name": "[format('{0}/storage-connection-string', variables('keyVaultName'))]",
      "properties": {
        "value": "[format('DefaultEndpointsProtocol=https;AccountName={0};AccountKey={1};EndpointSuffix={2}', variables('storageAccountName'), listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2023-04-01').keys[0].value, environment().suffixes.storage)]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]",
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]"
      ]
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2023-07-01",
      "name": "[format('{0}/appinsights-connection-string', variables('keyVaultName'))]",
      "properties": {
        "value": "[reference(resourceId('Microsoft.Insights/components', format('{0}-ai-{1}', variables('resourcePrefix'), variables('uniqueSuffix'))), '2020-02-02').ConnectionString]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]",
        "[resourceId('Microsoft.Insights/components', format('{0}-ai-{1}', variables('resourcePrefix'), variables('uniqueSuffix')))]"
      ]
    },
    {
      "condition": "[parameters('deployCosmosDB')]",
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2023-07-01",
      "name": "[format('{0}/cosmos-endpoint', variables('keyVaultName'))]",
      "properties": {
        "value": "[reference(resourceId('Microsoft.DocumentDB/databaseAccounts', format('{0}-cosmos-{1}', variables('resourcePrefix'), variables('uniqueSuffix'))), '2023-11-15').documentEndpoint]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]",
        "[resourceId('Microsoft.DocumentDB/databaseAccounts', format('{0}-cosmos-{1}', variables('resourcePrefix'), variables('uniqueSuffix')))]"
      ]
    },
    {
      "condition": "[parameters('deployCosmosDB')]",
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2023-07-01",
      "name": "[format('{0}/cosmos-key', variables('keyVaultName'))]",
      "properties": {
        "value": "[listKeys(resourceId('Microsoft.DocumentDB/databaseAccounts', format('{0}-cosmos-{1}', variables('resourcePrefix'), variables('uniqueSuffix'))), '2023-11-15').primaryMasterKey]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]",
        "[resourceId('Microsoft.DocumentDB/databaseAccounts', format('{0}-cosmos-{1}', variables('resourcePrefix'), variables('uniqueSuffix')))]"
      ]
    }
  ],
  "outputs": {
    "storageAccountName": {
      "type": "string",
      "value": "[variables('storageAccountName')]"
    },
    "keyVaultName": {
      "type": "string",
      "value": "[variables('keyVaultName')]"
    },
    "keyVaultUri": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName')), '2023-07-01').vaultUri]"
    },
    "appServicePlanName": {
      "type": "string",
      "value": "[format('{0}-asp-{1}', variables('resourcePrefix'), variables('uniqueSuffix'))]"
    },
    "vnetName": {
      "type": "string",
      "value": "[if(parameters('deployNetworking'), variables('vnetName'), '')]"
    },
    "readyForStep2": {
      "type": "string",
      "value": "Step 1 Complete! All secrets created. Wait 60-90 seconds then deploy Step 2."
    }
  }
}